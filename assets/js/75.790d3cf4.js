(window.webpackJsonp=window.webpackJsonp||[]).push([[75],{728:function(t,v,_){"use strict";_.r(v);var o=_(3),r=Object(o.a)({},(function(){var t=this,v=t.$createElement,_=t._self._c||v;return _("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[_("h3",{attrs:{id:"缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#缓存"}},[t._v("#")]),t._v(" 缓存")]),t._v(" "),_("ol",[_("li",[_("h3",{attrs:{id:"dns缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#dns缓存"}},[t._v("#")]),t._v(" DNS缓存")])])]),t._v(" "),_("p",[t._v("DNS(Domain Name System),即域名系统。")]),t._v(" "),_("p",[_("strong",[t._v("DNS解析")]),t._v("：通过域名，最终得到该域名对应的IP地址的过程叫做域名解析(或主机名解析)")]),t._v(" "),_("p",[_("strong",[t._v("DNS缓存")]),t._v("：有DNS的地方就有缓存。"),_("strong",[t._v("浏览器")]),t._v("、"),_("strong",[t._v("操作系统(本地host文件)")]),t._v("、"),_("strong",[t._v("Local DNS()")]),t._v("、"),_("strong",[t._v("根域名服务器")]),t._v("，他们都会对DNS结果做一定程度的缓存")]),t._v(" "),_("p",[t._v("DNS"),_("strong",[t._v("查询过程")]),t._v("如下:")]),t._v(" "),_("ol",[_("li",[_("p",[_("strong",[t._v("首先搜索浏览器自身的DNS缓存")]),t._v(",如果存在，则域名解析到此完成。")])]),t._v(" "),_("li",[_("p",[t._v("如果浏览器自身的缓存里面没有找到对应的条目，那么会尝试读取"),_("strong",[t._v("操作系统的hosts文件")]),t._v(" 看是否存在对应的映射关系,如果存在，则域名解析到此完成。")])]),t._v(" "),_("li",[_("p",[t._v("如果本地hosts文件不存在映射关系，则查找"),_("strong",[t._v("本地DNS服务器")]),t._v("(ISP服务器,或者自己手动设置的DNS服务器),如果存在,域名到此解析完成。")])]),t._v(" "),_("li",[_("p",[t._v("如果本地DNS服务器还没找到的话,它就会向"),_("strong",[t._v("根服务器")]),t._v("发出请求,进行"),_("strong",[t._v("递归查询")]),t._v("。")])]),t._v(" "),_("li",[_("h3",{attrs:{id:"cdn缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#cdn缓存"}},[t._v("#")]),t._v(" CDN缓存")])])]),t._v(" "),_("p",[_("strong",[t._v("什么是CDN")]),t._v("：CDN(Content Delivery Network),即"),_("strong",[t._v("内容分发网络")]),t._v("。")]),t._v(" "),_("p",[t._v("用户在浏览网站的时候，CDN会选择一个"),_("strong",[t._v("离用户最近的CDN边缘节点")]),t._v("来响应用户的请求，这样就可以帮助用户在最近的CDN节点(缓存服务器)，用最少的时间拿到想要的资源，同时也减轻了源服务器的负载压力")]),t._v(" "),_("p",[_("strong",[t._v("CDN缓存")]),t._v("：关于CDN缓存,在"),_("strong",[t._v("浏览器本地缓存失效后,浏览器会向CDN边缘节点发起请求")]),t._v("。类似浏览器缓存,CDN边缘节点也存在着一套缓存机制。CDN边缘节点缓存策略因服务商不同而不同，但一般都会遵循http标准协议，通过http响应头中的"),_("strong",[t._v("Cache-control: max-age")]),t._v("的字段来设置CDN边缘节点数据缓存时间。")]),t._v(" "),_("p",[_("strong",[t._v("CDN缓存机制")]),t._v("：当浏览器向CDN节点请求数据时，CDN节点会"),_("strong",[t._v("判断缓存数据是否过期")]),t._v("，若缓存数据并"),_("strong",[t._v("没有过期，则直接将缓存数据返回给客户端")]),t._v("；"),_("strong",[t._v("否则")]),t._v("，CDN节点就会"),_("strong",[t._v("向服务器发出回源请求")]),t._v("，从服务器拉取最新数据，"),_("strong",[t._v("更新本地缓存")]),t._v("，"),_("strong",[t._v("并将最新数据返回给客户端")]),t._v("。 CDN服务商一般会提供基于文件后缀、目录多个维度来指定CDN缓存时间，为用户提供更精细化的缓存管理。")]),t._v(" "),_("ol",{attrs:{start:"3"}},[_("li",[_("h3",{attrs:{id:"浏览器缓存-http缓存"}},[_("a",{staticClass:"header-anchor",attrs:{href:"#浏览器缓存-http缓存"}},[t._v("#")]),t._v(" 浏览器缓存(http缓存)")])])]),t._v(" "),_("p",[_("strong",[t._v("流程")]),t._v("：简单来说,浏览器缓存其实就是"),_("strong",[t._v("浏览器保存通过HTTP获取的所有资源,是浏览器将网络资源存储在本地的一种行为")]),t._v("。")]),t._v(" "),_("p",[_("img",{attrs:{src:"https://z3.ax1x.com/2021/08/28/h1YaQI.png",alt:"h1YaQI.png"}})]),t._v(" "),_("p",[t._v("​\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t\t(图片重要!!!)")]),t._v(" "),_("p",[_("strong",[t._v("缓存的资源在哪里")]),t._v("：")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("memory cache")]),t._v(":MemoryCache顾名思义，就是将"),_("strong",[t._v("资源缓存到内存")]),t._v("中，等待下次访问时不需要重新下载资源，而直接从内存中获取。Webkit早已支持memoryCache。 "),_("strong",[t._v("目前Webkit资源分成两类")]),t._v("，一类是"),_("strong",[t._v("主资源")]),t._v("，比如"),_("strong",[t._v("HTML页面，或者下载项")]),t._v("，一类是"),_("strong",[t._v("派生资源")]),t._v("，比"),_("strong",[t._v("如HTML页面中内嵌的图片或者脚本链接")]),t._v("，分别对应代码中两个类：MainResourceLoader和SubresourceLoader。虽然Webkit支持"),_("strong",[t._v("memoryCache，但是也只是针对派生资源")]),t._v("，它对应的类为CachedResource，用于保存原始数据（比如JS等），以及解码过的图片数据。")]),t._v(" "),_("li",[_("strong",[t._v("disk cache")]),t._v(":DiskCache顾名思义，就是"),_("strong",[t._v("将资源缓存到磁盘")]),t._v("中，等待下次访问时不需要重新下载资源，而直接从磁盘中获取，它的直接操作对象为CurlCacheManager。")]),t._v(" "),_("li",[_("strong",[t._v("三级缓存原理(访问缓存优先级)")]),t._v(" "),_("ol",[_("li",[_("strong",[t._v("先在内存中查找")]),t._v(",如果有,直接加载。(MemoryCache)刷新页面走的是Memory Cache")]),t._v(" "),_("li",[t._v("如果内存中不存在,则"),_("strong",[t._v("在硬盘中查找")]),t._v(",如果有直接加载。(disk cache),重新打开页面走的是disk cache,")]),t._v(" "),_("li",[t._v("如果硬盘中也没有,那么就进行"),_("strong",[t._v("网络请求")]),t._v("。(http)")]),t._v(" "),_("li",[_("strong",[t._v("请求获取的资源缓存到硬盘和内存")]),t._v("。")])])])]),t._v(" "),_("p",[_("strong",[t._v("浏览器缓存的分类")]),t._v(": "),_("strong",[t._v("强缓存、协商缓存")]),t._v("，浏览器在向服务器请求资源时，"),_("strong",[t._v("首先判断是否命中强缓存，再判断是否命中协商缓存")]),t._v("。")]),t._v(" "),_("p",[_("strong",[t._v("浏览器强缓存(本地缓存是否过期)")]),t._v("：浏览器在加载资源时，会先根据"),_("strong",[t._v("本地缓存资源的 header")]),t._v(" 中的信息判断是否命中强缓存，如果命中则直接使用缓存中的资源不会再向服务器发送请求。这里的 "),_("strong",[t._v("header")]),t._v(" 中的信息指的是 "),_("strong",[t._v("expires")]),t._v(" 和 "),_("strong",[t._v("cahe-control")]),t._v(".")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("expires")]),t._v("：该字段是http1.0时的规范，它的值为一个绝对时间的GMT时间字符串，比如 Expires:Mon,18 Oct 2066 23:59:59 GMT。这个时间"),_("strong",[t._v("代表着这个资源的失效时间")]),t._v("，在此时间之前，即命中缓存。这种方式有一个明显的缺点，由于失效时间是一个绝对时间，所以"),_("strong",[t._v("当服务器与客户端时间偏差较大时，就会导致缓存混乱。")])]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("Cache-Control(重要)")]),t._v("：Cache-Control 是 "),_("strong",[t._v("http1.1")]),t._v(" 时出现的 header 信息，主要是利用该字段的 "),_("strong",[t._v("max-age")]),t._v(" 值来进行判断，它是一个"),_("strong",[t._v("相对时间")]),t._v("，例如 Cache-Control:max-age=3600，代表着资源的有效期是 3600 秒。cache-control 除了该字段外，还有下面几个比较常用的设置值：")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("no-cache")]),t._v("：需要进行协商缓存，发送请求到服务器确认是否使用缓存。")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("no-store")]),t._v("：禁止使用缓存，每一次都要重新请求数据。")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("public")]),t._v("：可以被所有的用户缓存，包括终端用户和 CDN 等中间代理服务器。")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("private")]),t._v("：只能被终端用户的浏览器缓存，不允许 CDN 等中继缓存服务器对其缓存。")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("Cache-Control 与 Expires 可以在服务端配置同时启用，同时启用的时候 Cache-Control 优先级高。")])]),t._v(" "),_("p",[_("strong",[t._v("协商缓存(本地强缓存过期，服务器端判断是否有更新)")]),t._v("：当"),_("strong",[t._v("强缓存没有命中")]),t._v("的时候，浏览器会发送一个请求到服务器，服务器根据 header 中的部分信息来判断"),_("strong",[t._v("是否命中缓存。如果命中，则返回 304 ，告诉浏览器资源未更新")]),t._v("，可使用本地的缓存。")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("Last-Modify/If-Modify-Since")])]),t._v(" "),_("p",[t._v("​\t浏览器第一次请求一个资源的时候，服务器返回的 header 中会加上 "),_("strong",[t._v("Last-Modify")]),t._v("，Last-modify 是一个\t时间标识该资源的最后修改时间。")]),t._v(" "),_("p",[t._v("​\t当浏览器再次请求该资源时，"),_("strong",[t._v("request 的请求头中会包含 If-Modify-Since")]),t._v("，该值为缓存之前返回的Last-Modify。服务器收到 If-Modify-Since 后，"),_("strong",[t._v("根据资源\t的最后修改时间判断是否命中缓存")]),t._v("。")]),t._v(" "),_("p",[t._v("​\t如果命中缓存，则返回 304，并且不会返回资源内容，并且不会返回 Last-Modify。")]),t._v(" "),_("p",[t._v("​\t缺点:")]),t._v(" "),_("p",[t._v("​\t短时间内资源发生了改变，Last-Modified 并不会发生变化。")]),t._v(" "),_("p",[t._v("​\t周期性变化。如果这个资源在一个周期内修改回原来的样子了，我们认为是可以使用缓存的，但是 Last-Modified 可不这样认为,因此便有了 ETag。")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("ETag/If-None-Match(重要)")])]),t._v(" "),_("p",[t._v("​\t与 Last-Modify/If-Modify-Since 不同的是，Etag/If-None-Match 返回的是一个校验码。ETag 可以保证每一个资源是唯一的，"),_("strong",[t._v("资源变化都会导致 ETag 变化")]),t._v("。服务器根据浏览器上送的 "),_("strong",[t._v("If-None-Match")]),t._v(" 值来判断是否命中缓存。")]),t._v(" "),_("p",[t._v("​\t与 Last-Modified 不一样的是，当服务器返回 "),_("strong",[t._v("304 Not Modified")]),t._v(" 的响应时，由于 ETag 重新生成过，response header 中还会把这个 ETag 返回，即使这个 ETag 跟之前的没有变化。")]),t._v(" "),_("p",[t._v("​\t"),_("strong",[t._v("Last-Modified 与 ETag 是可以一起使用的，服务器会优先验证 ETag，一致的情况下，才会继续比对 Last-Modified，最后才决定是否返回 304。")])]),t._v(" "),_("p",[t._v("参考链接：https://juejin.cn/post/6844903764566999054")]),t._v(" "),_("p",[t._v("作者：null仔  来源：掘金")])])}),[],!1,null,null,null);v.default=r.exports}}]);